// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { BuildingType } from "./../common.sol";

struct BuildingsData {
  uint256[5] totalResourcesStaked;
}

library Buildings {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "Buildings", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746200000000000000000000000000004275696c64696e677300000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0000000100000000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint8, bool)
  Schema constant _keySchema = Schema.wrap(0x0002020000600000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256[])
  Schema constant _valueSchema = Schema.wrap(0x0000000181000000000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "building";
    keyNames[1] = "isTeamRight";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](1);
    fieldNames[0] = "totalResourcesStaked";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get totalResourcesStaked.
   */
  function getTotalResourcesStaked(
    BuildingType building,
    bool isTeamRight
  ) internal view returns (uint256[5] memory totalResourcesStaked) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(building)));
    _keyTuple[1] = _boolToBytes32(isTeamRight);

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return toStaticArray_uint256_5(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get totalResourcesStaked.
   */
  function _getTotalResourcesStaked(
    BuildingType building,
    bool isTeamRight
  ) internal view returns (uint256[5] memory totalResourcesStaked) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(building)));
    _keyTuple[1] = _boolToBytes32(isTeamRight);

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return toStaticArray_uint256_5(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set totalResourcesStaked.
   */
  function setTotalResourcesStaked(
    BuildingType building,
    bool isTeamRight,
    uint256[5] memory totalResourcesStaked
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(building)));
    _keyTuple[1] = _boolToBytes32(isTeamRight);

    StoreSwitch.setDynamicField(
      _tableId,
      _keyTuple,
      0,
      EncodeArray.encode(fromStaticArray_uint256_5(totalResourcesStaked))
    );
  }

  /**
   * @notice Set totalResourcesStaked.
   */
  function _setTotalResourcesStaked(
    BuildingType building,
    bool isTeamRight,
    uint256[5] memory totalResourcesStaked
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(building)));
    _keyTuple[1] = _boolToBytes32(isTeamRight);

    StoreCore.setDynamicField(
      _tableId,
      _keyTuple,
      0,
      EncodeArray.encode(fromStaticArray_uint256_5(totalResourcesStaked))
    );
  }

  /**
   * @notice Get the length of totalResourcesStaked.
   */
  function lengthTotalResourcesStaked(BuildingType building, bool isTeamRight) internal pure returns (uint256) {
    return 5;
  }

  /**
   * @notice Get the length of totalResourcesStaked.
   */
  function _lengthTotalResourcesStaked(BuildingType building, bool isTeamRight) internal pure returns (uint256) {
    return 5;
  }

  /**
   * @notice Get an item of totalResourcesStaked.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemTotalResourcesStaked(
    BuildingType building,
    bool isTeamRight,
    uint256 _index
  ) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(building)));
    _keyTuple[1] = _boolToBytes32(isTeamRight);

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of totalResourcesStaked.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemTotalResourcesStaked(
    BuildingType building,
    bool isTeamRight,
    uint256 _index
  ) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(building)));
    _keyTuple[1] = _boolToBytes32(isTeamRight);

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Update an element of totalResourcesStaked at `_index`.
   */
  function updateTotalResourcesStaked(
    BuildingType building,
    bool isTeamRight,
    uint256 _index,
    uint256 _element
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(building)));
    _keyTuple[1] = _boolToBytes32(isTeamRight);

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of totalResourcesStaked at `_index`.
   */
  function _updateTotalResourcesStaked(
    BuildingType building,
    bool isTeamRight,
    uint256 _index,
    uint256 _element
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(building)));
    _keyTuple[1] = _boolToBytes32(isTeamRight);

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(BuildingType building, bool isTeamRight) internal view returns (BuildingsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(building)));
    _keyTuple[1] = _boolToBytes32(isTeamRight);

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(BuildingType building, bool isTeamRight) internal view returns (BuildingsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(building)));
    _keyTuple[1] = _boolToBytes32(isTeamRight);

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(BuildingType building, bool isTeamRight, uint256[5] memory totalResourcesStaked) internal {
    bytes memory _staticData;
    PackedCounter _encodedLengths = encodeLengths(totalResourcesStaked);
    bytes memory _dynamicData = encodeDynamic(totalResourcesStaked);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(building)));
    _keyTuple[1] = _boolToBytes32(isTeamRight);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(BuildingType building, bool isTeamRight, uint256[5] memory totalResourcesStaked) internal {
    bytes memory _staticData;
    PackedCounter _encodedLengths = encodeLengths(totalResourcesStaked);
    bytes memory _dynamicData = encodeDynamic(totalResourcesStaked);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(building)));
    _keyTuple[1] = _boolToBytes32(isTeamRight);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(BuildingType building, bool isTeamRight, BuildingsData memory _table) internal {
    bytes memory _staticData;
    PackedCounter _encodedLengths = encodeLengths(_table.totalResourcesStaked);
    bytes memory _dynamicData = encodeDynamic(_table.totalResourcesStaked);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(building)));
    _keyTuple[1] = _boolToBytes32(isTeamRight);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(BuildingType building, bool isTeamRight, BuildingsData memory _table) internal {
    bytes memory _staticData;
    PackedCounter _encodedLengths = encodeLengths(_table.totalResourcesStaked);
    bytes memory _dynamicData = encodeDynamic(_table.totalResourcesStaked);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(building)));
    _keyTuple[1] = _boolToBytes32(isTeamRight);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    PackedCounter _encodedLengths,
    bytes memory _blob
  ) internal pure returns (uint256[5] memory totalResourcesStaked) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    totalResourcesStaked = toStaticArray_uint256_5(SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   *
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory,
    PackedCounter _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (BuildingsData memory _table) {
    (_table.totalResourcesStaked) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(BuildingType building, bool isTeamRight) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(building)));
    _keyTuple[1] = _boolToBytes32(isTeamRight);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(BuildingType building, bool isTeamRight) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(building)));
    _keyTuple[1] = _boolToBytes32(isTeamRight);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(uint256[5] memory totalResourcesStaked) internal pure returns (PackedCounter _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(totalResourcesStaked.length * 32);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(uint256[5] memory totalResourcesStaked) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode(fromStaticArray_uint256_5(totalResourcesStaked)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256[5] memory totalResourcesStaked
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData;
    PackedCounter _encodedLengths = encodeLengths(totalResourcesStaked);
    bytes memory _dynamicData = encodeDynamic(totalResourcesStaked);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(BuildingType building, bool isTeamRight) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(building)));
    _keyTuple[1] = _boolToBytes32(isTeamRight);

    return _keyTuple;
  }
}

/**
 * @notice Cast a dynamic array to a static array.
 * @dev In memory static arrays are just dynamic arrays without the 32 length bytes,
 * so this function moves the pointer to the first element of the dynamic array.
 * If the length of the dynamic array is smaller than the static length,
 * the function returns an uninitialized array to avoid memory corruption.
 * @param _value The dynamic array to cast.
 * @return _result The static array.
 */
function toStaticArray_uint256_5(uint256[] memory _value) pure returns (uint256[5] memory _result) {
  if (_value.length < 5) {
    // return an uninitialized array if the length is smaller than the fixed length to avoid memory corruption
    return _result;
  } else {
    // in memory static arrays are just dynamic arrays without the 32 length bytes
    // (without the length check this could lead to memory corruption)
    assembly {
      _result := add(_value, 0x20)
    }
  }
}

/**
 * @notice Copy a static array to a dynamic array.
 * @dev Static arrays don't have a length prefix, so this function copies the memory from the static array to a new dynamic array.
 * @param _value The static array to copy.
 * @return _result The dynamic array.
 */
function fromStaticArray_uint256_5(uint256[5] memory _value) pure returns (uint256[] memory _result) {
  _result = new uint256[](5);
  uint256 fromPointer;
  uint256 toPointer;
  assembly {
    fromPointer := _value
    toPointer := add(_result, 0x20)
  }
  Memory.copy(fromPointer, toPointer, 160);
}

/**
 * @notice Cast a bool to a bytes32.
 * @dev The boolean value is casted to a bytes32 value with 0 or 1 at the least significant bit.
 */
function _boolToBytes32(bool value) pure returns (bytes32 result) {
  assembly {
    result := value
  }
}
