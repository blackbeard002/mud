import m from"fs";async function o(n){try{return await WebAssembly.compileStreaming(fetch(n))}catch{return WebAssembly.compile(m.readFileSync(n))}}function u(n,r,e){return r+n*(e-r)}function i(n,r){let e=n.findIndex(t=>t[0]>=r);if(e>0)return[n[e-1],n[e]];console.warn("out of reach",r,n)}function s(n){return r=>{let e=i(n,r);if(!e)return r;let t=(r-e[0][0])/(e[1][0]-e[0][0]);return u(t,e[0][1],e[1][1])}}async function b(){let n=await o(new URL("../build/release.wasm",import.meta.url));return(await WebAssembly.instantiate(n,{env:{abort:e=>{throw new Error("abort called in wasm perlin: "+e)}}})).exports.perlin}export{b as createPerlin,s as createSplines,o as fetchAndCompileWasmModule,u as lerp};
//# sourceMappingURL=index.js.map