{"version":3,"sources":["../ts/index.ts"],"sourcesContent":["import fs from \"fs\";\n// import * as buffer from \"buffer\";\n// const { Buffer } = buffer;\n\n// export function encodePackedU32(inputs: number[]): Buffer {\n//   const buffer = Buffer.from(inputs.map((i) => i.toString(16).padStart(8, \"0\")).join(\"\"), \"hex\");\n//   return buffer;\n// }\n\nexport async function fetchAndCompileWasmModule(url: URL) {\n  try {\n    return await WebAssembly.compileStreaming(fetch(url));\n  } catch {\n    return WebAssembly.compile(fs.readFileSync(url));\n  }\n}\n\nexport function lerp(t: number, a: number, b: number): number {\n  return a + t * (b - a);\n}\n\nfunction getSplinePoints(splines: [number, number][], x: number) {\n  const index = splines.findIndex((s) => s[0] >= x);\n  if (index > 0) return [splines[index - 1], splines[index]];\n  console.warn(\"out of reach\", x, splines);\n  return undefined;\n}\n\nexport function createSplines(splines: [number, number][]): (x: number) => number {\n  return (x: number) => {\n    const points = getSplinePoints(splines, x);\n    if (!points) return x;\n\n    const t = (x - points[0][0]) / (points[1][0] - points[0][0]);\n    const height = lerp(t, points[0][1], points[1][1]);\n\n    return height;\n  };\n}\n\ntype Perlin = (_x: number, _y: number, _z: number, denom: number) => number;\n\nexport async function createPerlin(): Promise<Perlin> {\n  const wasmModule = await fetchAndCompileWasmModule(new URL(\"../build/release.wasm\", import.meta.url));\n  const wasmInstance = await WebAssembly.instantiate(wasmModule, {\n    env: {\n      abort: (e: string) => {\n        throw new Error(\"abort called in wasm perlin: \" + e);\n      },\n    },\n  });\n\n  return wasmInstance.exports.perlin as Perlin;\n}\n"],"mappings":"AAAA,OAAOA,MAAQ,KASf,eAAsBC,EAA0BC,EAAU,CACxD,GAAI,CACF,OAAO,MAAM,YAAY,iBAAiB,MAAMA,CAAG,CAAC,CACtD,MAAE,CACA,OAAO,YAAY,QAAQF,EAAG,aAAaE,CAAG,CAAC,CACjD,CACF,CAEO,SAASC,EAAKC,EAAWC,EAAWC,EAAmB,CAC5D,OAAOD,EAAID,GAAKE,EAAID,EACtB,CAEA,SAASE,EAAgBC,EAA6BC,EAAW,CAC/D,IAAMC,EAAQF,EAAQ,UAAWG,GAAMA,EAAE,CAAC,GAAKF,CAAC,EAChD,GAAIC,EAAQ,EAAG,MAAO,CAACF,EAAQE,EAAQ,CAAC,EAAGF,EAAQE,CAAK,CAAC,EACzD,QAAQ,KAAK,eAAgBD,EAAGD,CAAO,CAEzC,CAEO,SAASI,EAAcJ,EAAoD,CAChF,OAAQC,GAAc,CACpB,IAAMI,EAASN,EAAgBC,EAASC,CAAC,EACzC,GAAI,CAACI,EAAQ,OAAOJ,EAEpB,IAAM,GAAKA,EAAII,EAAO,CAAC,EAAE,CAAC,IAAMA,EAAO,CAAC,EAAE,CAAC,EAAIA,EAAO,CAAC,EAAE,CAAC,GAG1D,OAFeV,EAAK,EAAGU,EAAO,CAAC,EAAE,CAAC,EAAGA,EAAO,CAAC,EAAE,CAAC,CAAC,CAGnD,CACF,CAIA,eAAsBC,GAAgC,CACpD,IAAMC,EAAa,MAAMd,EAA0B,IAAI,IAAI,wBAAyB,YAAY,GAAG,CAAC,EASpG,OARqB,MAAM,YAAY,YAAYc,EAAY,CAC7D,IAAK,CACH,MAAQ,GAAc,CACpB,MAAM,IAAI,MAAM,gCAAkC,CAAC,CACrD,CACF,CACF,CAAC,GAEmB,QAAQ,MAC9B","names":["fs","fetchAndCompileWasmModule","url","lerp","t","a","b","getSplinePoints","splines","x","index","s","createSplines","points","createPerlin","wasmModule"]}