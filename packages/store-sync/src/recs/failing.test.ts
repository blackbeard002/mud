/* eslint-disable max-len */
import { describe, it } from "vitest";
import { decodeValueArgs } from "@latticexyz/protocol-parser";
import { flattenSchema } from "../flattenSchema";

const valueSchema = {
  aggressorEntity: {
    type: "bytes32",
    internalType: "bytes32",
  },
  aggressorDamage: {
    type: "uint256",
    internalType: "uint256",
  },
  targetEntity: {
    type: "bytes32",
    internalType: "bytes32",
  },
  targetDamage: {
    type: "uint256",
    internalType: "uint256",
  },
  winner: {
    type: "bytes32",
    internalType: "bytes32",
  },
  rock: {
    type: "bytes32",
    internalType: "bytes32",
  },
  player: {
    type: "bytes32",
    internalType: "bytes32",
  },
  targetPlayer: {
    type: "bytes32",
    internalType: "bytes32",
  },
  timestamp: {
    type: "uint256",
    internalType: "uint256",
  },
  aggressorAllies: {
    type: "bytes32[]",
    internalType: "bytes32[]",
  },
  targetAllies: {
    type: "bytes32[]",
    internalType: "bytes32[]",
  },
};

describe("failing test cases", () => {
  it("doesn't print log", () => {
    const args = {
      tableId: "0x6f740000000000000000000000000000426174746c65526573756c7400000000",
      keyTuple: ["0x5bad7dc86e493c3c3e63e0aecf164873dc14a2590ad3358bcfda1a09324471db"],
      staticData:
        "0x6ac86c05a9146504d6fbccf4d0d93dfd78c58617a3e3ba155aa62cdfd2f7b6ee000000000000000000000000000000000000000000000012f939c99edab8000034a0c11ffc633cd3704e5f0f5c3501c2af1245044f396f8027821a739264af5700000000000000000000000000000000000000000000000000000000000000006ac86c05a9146504d6fbccf4d0d93dfd78c58617a3e3ba155aa62cdfd2f7b6ee34a0c11ffc633cd3704e5f0f5c3501c2af1245044f396f8027821a739264af5700000000000000000000000099b53994c776e2c1300686b6d055a175b65c9f50da7096dcbb41cf86a9e2dec8c3f7f2751ebfac2987e0bf8ea6de91a8006ed8820000000000000000000000000000000000000000000000000000000065e20124",
      encodedLengths: "0x0000000000000000000000000000000000000000000000000000000000000000",
      // No dynamic data
      dynamicData: "0x",
    };

    // Doesn't print log
    const value = decodeValueArgs(flattenSchema(valueSchema), args);

    console.log(value);
  });

  it("prints log 1", () => {
    const args = {
      tableId: "0x6f740000000000000000000000000000426174746c65526573756c7400000000",
      keyTuple: ["0x94a20d7cecba2a0266a9f899622dd00d801b15bd7640739b3f708d7429cd4506"],
      staticData:
        "0x0000000000000000000000007dd96aa0f6696245c8552a2d724ead6c7fd53bd9000000000000000000000000c2f7cc4036725ab3f8fc43902bdfaf8227fe15e4000000000000000000000000c2f7cc4036725ab3f8fc43902bdfaf8227fe15e49ab7b2f70269ecf8ec6acfe5fd7a5da9f2def87a1cb1b02d1f57438b2403139900000000000000000000000000000000000000000000000000000000000426800000000000000000000000000000000000000000000000000000000065e1fc8c",
      encodedLengths: "0x0000000000000000010000000001000000000100000000010000000000000400",
      // Some dynamic data
      dynamicData:
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007d00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c2000000000000000000000000000000000000000000000000000000000000014fbc000000000000000000000000000000000000000000000000000000000000014400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    };

    // Prints log
    const value = decodeValueArgs(flattenSchema(valueSchema), args);

    console.log(value);
  });

  it("prints log 2", () => {
    const args = {
      tableId: "0x6f740000000000000000000000000000426174746c65526573756c7400000000",
      keyTuple: ["0x9c1d44b92706473c04226133a43c69822cda17e84f7870489477dc0b0aad3d7e"],
      staticData:
        "0x0000000000000000000000007dd96aa0f6696245c8552a2d724ead6c7fd53bd9000000000000000000000000c2f7cc4036725ab3f8fc43902bdfaf8227fe15e40000000000000000000000007dd96aa0f6696245c8552a2d724ead6c7fd53bd9c115bfd5c846f982325bafdba58777e9230f72ce9ad178e9a424146edf68d0e800000000000000000000000000000000000000000000000000000000000173180000000000000000000000000000000000000000000000000000000065e1fc92",
      encodedLengths: "0x0000000000000000010000000001000000000100000000010000000000000400",
      // Some dynamic data
      dynamicData:
        "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000ff
    };

    // prints log
    const value = decodeValueArgs(flattenSchema(valueSchema), args);

    console.log(value);
  });
});
