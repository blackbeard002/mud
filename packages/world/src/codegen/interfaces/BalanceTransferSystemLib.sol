// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { IWorldKernel } from "../../IWorldKernel.sol";
import { WorldContextConsumerLib } from "../../WorldContext.sol";
import { ResourceId, WorldResourceIdLib } from "../../WorldResourceId.sol";
import { RESOURCE_SYSTEM } from "../../worldResourceTypes.sol";

import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { IBalanceTransferSystem } from "./IBalanceTransferSystem.sol";

library Utils {
  bytes14 constant namespace = "";
  bytes16 constant name = "BalanceTransferS";

  function systemId(bytes14 _namespace) internal pure returns (ResourceId) {
    return WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: _namespace, name: name });
  }

  function systemId() internal pure returns (ResourceId) {
    return systemId(namespace);
  }
}

/**
 * @title BalanceTransferSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library BalanceTransferSystemLib {
  function transferBalanceToNamespace(ResourceId fromNamespaceId, ResourceId toNamespaceId, uint256 amount) internal {
    IWorldKernel(WorldContextConsumerLib._world()).call(
      Utils.systemId(),
      abi.encodeCall(IBalanceTransferSystem.transferBalanceToNamespace, (fromNamespaceId, toNamespaceId, amount))
    );
  }

  function transferBalanceToAddress(ResourceId fromNamespaceId, address toAddress, uint256 amount) internal {
    IWorldKernel(WorldContextConsumerLib._world()).call(
      Utils.systemId(),
      abi.encodeCall(IBalanceTransferSystem.transferBalanceToAddress, (fromNamespaceId, toAddress, amount))
    );
  }
}
