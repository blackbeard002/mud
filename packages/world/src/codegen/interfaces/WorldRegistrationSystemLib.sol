// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { IWorldKernel } from "../../IWorldKernel.sol";
import { WorldContextConsumerLib } from "../../WorldContext.sol";
import { ResourceId, WorldResourceIdLib } from "../../WorldResourceId.sol";
import { RESOURCE_SYSTEM } from "../../worldResourceTypes.sol";

import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { ISystemHook } from "./../../ISystemHook.sol";
import { System } from "./../../System.sol";
import { IWorldRegistrationSystem } from "./IWorldRegistrationSystem.sol";

library Utils {
  bytes14 constant namespace = "";
  bytes16 constant name = "WorldRegistratio";

  function systemId(bytes14 _namespace) internal pure returns (ResourceId) {
    return WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: _namespace, name: name });
  }

  function systemId() internal pure returns (ResourceId) {
    return systemId(namespace);
  }
}

/**
 * @title WorldRegistrationSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library WorldRegistrationSystemLib {
  function registerNamespace(ResourceId namespaceId) internal {
    IWorldKernel(WorldContextConsumerLib._world()).call(
      Utils.systemId(),
      abi.encodeCall(IWorldRegistrationSystem.registerNamespace, (namespaceId))
    );
  }

  function registerSystemHook(ResourceId systemId, ISystemHook hookAddress, uint8 enabledHooksBitmap) internal {
    IWorldKernel(WorldContextConsumerLib._world()).call(
      Utils.systemId(),
      abi.encodeCall(IWorldRegistrationSystem.registerSystemHook, (systemId, hookAddress, enabledHooksBitmap))
    );
  }

  function unregisterSystemHook(ResourceId systemId, ISystemHook hookAddress) internal {
    IWorldKernel(WorldContextConsumerLib._world()).call(
      Utils.systemId(),
      abi.encodeCall(IWorldRegistrationSystem.unregisterSystemHook, (systemId, hookAddress))
    );
  }

  function registerSystem(ResourceId systemId, System system, bool publicAccess) internal {
    IWorldKernel(WorldContextConsumerLib._world()).call(
      Utils.systemId(),
      abi.encodeCall(IWorldRegistrationSystem.registerSystem, (systemId, system, publicAccess))
    );
  }

  function registerFunctionSelector(
    ResourceId systemId,
    string memory systemFunctionSignature
  ) internal returns (bytes4 worldFunctionSelector) {
    return
      abi.decode(
        IWorldKernel(WorldContextConsumerLib._world()).call(
          Utils.systemId(),
          abi.encodeCall(IWorldRegistrationSystem.registerFunctionSelector, (systemId, systemFunctionSignature))
        ),
        (bytes4)
      );
  }

  function registerRootFunctionSelector(
    ResourceId systemId,
    string memory worldFunctionSignature,
    string memory systemFunctionSignature
  ) internal returns (bytes4 worldFunctionSelector) {
    return
      abi.decode(
        IWorldKernel(WorldContextConsumerLib._world()).call(
          Utils.systemId(),
          abi.encodeCall(
            IWorldRegistrationSystem.registerRootFunctionSelector,
            (systemId, worldFunctionSignature, systemFunctionSignature)
          )
        ),
        (bytes4)
      );
  }

  function registerDelegation(address delegatee, ResourceId delegationControlId, bytes memory initCallData) internal {
    IWorldKernel(WorldContextConsumerLib._world()).call(
      Utils.systemId(),
      abi.encodeCall(IWorldRegistrationSystem.registerDelegation, (delegatee, delegationControlId, initCallData))
    );
  }

  function unregisterDelegation(address delegatee) internal {
    IWorldKernel(WorldContextConsumerLib._world()).call(
      Utils.systemId(),
      abi.encodeCall(IWorldRegistrationSystem.unregisterDelegation, (delegatee))
    );
  }

  function registerNamespaceDelegation(
    ResourceId namespaceId,
    ResourceId delegationControlId,
    bytes memory initCallData
  ) internal {
    IWorldKernel(WorldContextConsumerLib._world()).call(
      Utils.systemId(),
      abi.encodeCall(
        IWorldRegistrationSystem.registerNamespaceDelegation,
        (namespaceId, delegationControlId, initCallData)
      )
    );
  }

  function unregisterNamespaceDelegation(ResourceId namespaceId) internal {
    IWorldKernel(WorldContextConsumerLib._world()).call(
      Utils.systemId(),
      abi.encodeCall(IWorldRegistrationSystem.unregisterNamespaceDelegation, (namespaceId))
    );
  }
}
